# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


# Remove the documentation of some functions.
# See https://pdoc3.github.io/pdoc/doc/pdoc/#overriding-docstrings-with-
__pdoc__ = {}
__pdoc__['Domain_AllValues'] = False
__pdoc__['Domain_FromFlatIntervals'] = False
__pdoc__['Domain_FromIntervals'] = False
__pdoc__['Domain_FromValues'] = False
__pdoc__['Domain.thisown'] = False



from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_sorted_interval_list')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_sorted_interval_list')
    _sorted_interval_list = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_sorted_interval_list', [dirname(__file__)])
        except ImportError:
            import _sorted_interval_list
            return _sorted_interval_list
        try:
            _mod = imp.load_module('_sorted_interval_list', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _sorted_interval_list = swig_import_helper()
    del swig_import_helper
else:
    import _sorted_interval_list
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class Domain(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Domain, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Domain, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _sorted_interval_list.new_Domain(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    if _newclass:
        AllValues = staticmethod(_sorted_interval_list.Domain_AllValues)
    else:
        AllValues = _sorted_interval_list.Domain_AllValues
    if _newclass:
        FromValues = staticmethod(_sorted_interval_list.Domain_FromValues)
    else:
        FromValues = _sorted_interval_list.Domain_FromValues
    if _newclass:
        FromIntervals = staticmethod(_sorted_interval_list.Domain_FromIntervals)
    else:
        FromIntervals = _sorted_interval_list.Domain_FromIntervals
    if _newclass:
        FromFlatIntervals = staticmethod(_sorted_interval_list.Domain_FromFlatIntervals)
    else:
        FromFlatIntervals = _sorted_interval_list.Domain_FromFlatIntervals

    def FlattenedIntervals(self) -> "std::vector< int64 >":
        return _sorted_interval_list.Domain_FlattenedIntervals(self)

    def IsEmpty(self) -> "bool":
        return _sorted_interval_list.Domain_IsEmpty(self)

    def Size(self) -> "int64":
        return _sorted_interval_list.Domain_Size(self)

    def Min(self) -> "int64":
        return _sorted_interval_list.Domain_Min(self)

    def Max(self) -> "int64":
        return _sorted_interval_list.Domain_Max(self)

    def Contains(self, value: 'int64') -> "bool":
        return _sorted_interval_list.Domain_Contains(self, value)

    def Complement(self) -> "operations_research::Domain":
        return _sorted_interval_list.Domain_Complement(self)

    def Negation(self) -> "operations_research::Domain":
        return _sorted_interval_list.Domain_Negation(self)

    def IntersectionWith(self, domain: 'Domain') -> "operations_research::Domain":
        return _sorted_interval_list.Domain_IntersectionWith(self, domain)

    def UnionWith(self, domain: 'Domain') -> "operations_research::Domain":
        return _sorted_interval_list.Domain_UnionWith(self, domain)

    def AdditionWith(self, domain: 'Domain') -> "operations_research::Domain":
        return _sorted_interval_list.Domain_AdditionWith(self, domain)

    def __str__(self) -> "std::string":
        return _sorted_interval_list.Domain___str__(self)

    def __lt__(self, other: 'Domain') -> "bool":
        return _sorted_interval_list.Domain___lt__(self, other)

    def __eq__(self, other: 'Domain') -> "bool":
        return _sorted_interval_list.Domain___eq__(self, other)

    def __ne__(self, other: 'Domain') -> "bool":
        return _sorted_interval_list.Domain___ne__(self, other)
    __swig_destroy__ = _sorted_interval_list.delete_Domain
    __del__ = lambda self: None
Domain_swigregister = _sorted_interval_list.Domain_swigregister
Domain_swigregister(Domain)

def Domain_AllValues() -> "operations_research::Domain":
    return _sorted_interval_list.Domain_AllValues()
Domain_AllValues = _sorted_interval_list.Domain_AllValues

def Domain_FromValues(values: 'std::vector< int64 >') -> "operations_research::Domain":
    return _sorted_interval_list.Domain_FromValues(values)
Domain_FromValues = _sorted_interval_list.Domain_FromValues

def Domain_FromIntervals(intervals: 'std::vector< std::vector< int64 > > const &') -> "operations_research::Domain":
    return _sorted_interval_list.Domain_FromIntervals(intervals)
Domain_FromIntervals = _sorted_interval_list.Domain_FromIntervals

def Domain_FromFlatIntervals(flat_intervals: 'std::vector< int64 > const &') -> "operations_research::Domain":
    return _sorted_interval_list.Domain_FromFlatIntervals(flat_intervals)
Domain_FromFlatIntervals = _sorted_interval_list.Domain_FromFlatIntervals


def __lshift__(*args) -> "std::ostream &":
    return _sorted_interval_list.__lshift__(*args)
__lshift__ = _sorted_interval_list.__lshift__
# This file is compatible with both classic and new-style classes.


