# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_pywrapsat')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_pywrapsat')
    _pywrapsat = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pywrapsat', [dirname(__file__)])
        except ImportError:
            import _pywrapsat
            return _pywrapsat
        try:
            _mod = imp.load_module('_pywrapsat', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _pywrapsat = swig_import_helper()
    del swig_import_helper
else:
    import _pywrapsat
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

try:
    import weakref
    weakref_proxy = weakref.proxy
except __builtin__.Exception:
    weakref_proxy = lambda x: x



import numbers

class SolutionCallback(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SolutionCallback, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SolutionCallback, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _pywrapsat.delete_SolutionCallback
    __del__ = lambda self: None

    def OnSolutionCallback(self) -> "void":
        return _pywrapsat.SolutionCallback_OnSolutionCallback(self)

    def NumBooleans(self) -> "int64":
        return _pywrapsat.SolutionCallback_NumBooleans(self)

    def NumBranches(self) -> "int64":
        return _pywrapsat.SolutionCallback_NumBranches(self)

    def NumConflicts(self) -> "int64":
        return _pywrapsat.SolutionCallback_NumConflicts(self)

    def NumBinaryPropagations(self) -> "int64":
        return _pywrapsat.SolutionCallback_NumBinaryPropagations(self)

    def NumIntegerPropagations(self) -> "int64":
        return _pywrapsat.SolutionCallback_NumIntegerPropagations(self)

    def WallTime(self) -> "double":
        return _pywrapsat.SolutionCallback_WallTime(self)

    def UserTime(self) -> "double":
        return _pywrapsat.SolutionCallback_UserTime(self)

    def ObjectiveValue(self) -> "double":
        return _pywrapsat.SolutionCallback_ObjectiveValue(self)

    def BestObjectiveBound(self) -> "double":
        return _pywrapsat.SolutionCallback_BestObjectiveBound(self)

    def SolutionIntegerValue(self, index: 'int') -> "int64":
        return _pywrapsat.SolutionCallback_SolutionIntegerValue(self, index)

    def SolutionBooleanValue(self, index: 'int') -> "bool":
        return _pywrapsat.SolutionCallback_SolutionBooleanValue(self, index)

    def StopSearch(self) -> "void":
        return _pywrapsat.SolutionCallback_StopSearch(self)

    def Response(self) -> "operations_research::sat::CpSolverResponse":
        return _pywrapsat.SolutionCallback_Response(self)

    def HasResponse(self) -> "bool":
        return _pywrapsat.SolutionCallback_HasResponse(self)

    def __init__(self):
        if self.__class__ == SolutionCallback:
            _self = None
        else:
            _self = self
        this = _pywrapsat.new_SolutionCallback(_self, )
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    def __disown__(self):
        self.this.disown()
        _pywrapsat.disown_SolutionCallback(self)
        return weakref_proxy(self)
SolutionCallback_swigregister = _pywrapsat.SolutionCallback_swigregister
SolutionCallback_swigregister(SolutionCallback)

class SatHelper(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SatHelper, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SatHelper, name)
    __repr__ = _swig_repr
    if _newclass:
        Solve = staticmethod(_pywrapsat.SatHelper_Solve)
    else:
        Solve = _pywrapsat.SatHelper_Solve
    if _newclass:
        SolveWithParameters = staticmethod(_pywrapsat.SatHelper_SolveWithParameters)
    else:
        SolveWithParameters = _pywrapsat.SatHelper_SolveWithParameters
    if _newclass:
        SolveWithParametersAndSolutionCallback = staticmethod(_pywrapsat.SatHelper_SolveWithParametersAndSolutionCallback)
    else:
        SolveWithParametersAndSolutionCallback = _pywrapsat.SatHelper_SolveWithParametersAndSolutionCallback
    if _newclass:
        ModelStats = staticmethod(_pywrapsat.SatHelper_ModelStats)
    else:
        ModelStats = _pywrapsat.SatHelper_ModelStats
    if _newclass:
        SolverResponseStats = staticmethod(_pywrapsat.SatHelper_SolverResponseStats)
    else:
        SolverResponseStats = _pywrapsat.SatHelper_SolverResponseStats
    if _newclass:
        ValidateModel = staticmethod(_pywrapsat.SatHelper_ValidateModel)
    else:
        ValidateModel = _pywrapsat.SatHelper_ValidateModel

    def __init__(self):
        this = _pywrapsat.new_SatHelper()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pywrapsat.delete_SatHelper
    __del__ = lambda self: None
SatHelper_swigregister = _pywrapsat.SatHelper_swigregister
SatHelper_swigregister(SatHelper)

def SatHelper_Solve(model_proto: 'operations_research::sat::CpModelProto const &') -> "operations_research::sat::CpSolverResponse":
    return _pywrapsat.SatHelper_Solve(model_proto)
SatHelper_Solve = _pywrapsat.SatHelper_Solve

def SatHelper_SolveWithParameters(model_proto: 'operations_research::sat::CpModelProto const &', parameters: 'operations_research::sat::SatParameters const &') -> "operations_research::sat::CpSolverResponse":
    return _pywrapsat.SatHelper_SolveWithParameters(model_proto, parameters)
SatHelper_SolveWithParameters = _pywrapsat.SatHelper_SolveWithParameters

def SatHelper_SolveWithParametersAndSolutionCallback(model_proto: 'operations_research::sat::CpModelProto const &', parameters: 'operations_research::sat::SatParameters const &', callback: 'SolutionCallback') -> "operations_research::sat::CpSolverResponse":
    return _pywrapsat.SatHelper_SolveWithParametersAndSolutionCallback(model_proto, parameters, callback)
SatHelper_SolveWithParametersAndSolutionCallback = _pywrapsat.SatHelper_SolveWithParametersAndSolutionCallback

def SatHelper_ModelStats(model_proto: 'operations_research::sat::CpModelProto const &') -> "std::string":
    return _pywrapsat.SatHelper_ModelStats(model_proto)
SatHelper_ModelStats = _pywrapsat.SatHelper_ModelStats

def SatHelper_SolverResponseStats(response: 'operations_research::sat::CpSolverResponse const &') -> "std::string":
    return _pywrapsat.SatHelper_SolverResponseStats(response)
SatHelper_SolverResponseStats = _pywrapsat.SatHelper_SolverResponseStats

def SatHelper_ValidateModel(model_proto: 'operations_research::sat::CpModelProto const &') -> "std::string":
    return _pywrapsat.SatHelper_ValidateModel(model_proto)
SatHelper_ValidateModel = _pywrapsat.SatHelper_ValidateModel

# This file is compatible with both classic and new-style classes.


